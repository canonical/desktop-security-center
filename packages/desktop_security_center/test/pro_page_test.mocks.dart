// Mocks generated by Mockito 5.4.4 from annotations
// in desktop_security_center/test/pro_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:desktop_security_center/src/ubuntu_pro/pro_client.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DscProClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockDscProClient extends _i1.Mock implements _i2.DscProClient {
  MockDscProClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> isMachineProAttached() => (super.noSuchMethod(
        Invocation.method(
          #isMachineProAttached,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> attachProMachine() => (super.noSuchMethod(
        Invocation.method(
          #attachProMachine,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> isEsmAppsEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isEsmAppsEnabled,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> enableEsmApps() => (super.noSuchMethod(
        Invocation.method(
          #enableEsmApps,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> disableEsmApps() => (super.noSuchMethod(
        Invocation.method(
          #disableEsmApps,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> isEsmInfraEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isEsmInfraEnabled,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> enableEsmInfra() => (super.noSuchMethod(
        Invocation.method(
          #enableEsmInfra,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> disableEsmInfra() => (super.noSuchMethod(
        Invocation.method(
          #disableEsmInfra,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> isKernelLivePatchEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isKernelLivePatchEnabled,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> enableKernelLivePatch() => (super.noSuchMethod(
        Invocation.method(
          #enableKernelLivePatch,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> disableKernelLivePatch() => (super.noSuchMethod(
        Invocation.method(
          #disableKernelLivePatch,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
